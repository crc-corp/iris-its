<?xml version="1.0"?>

<!-- ant build file for sonar project
     Copyright (C) 2007-2014  Minnesota Department of Transportation

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.  -->

<project name="sonar" default="dist" basedir=".">
	<property file="project.properties"/>
	<property file="${user.home}/.ant.properties"/>
	<property name="src.dir" value="src"/>
	<property name="etc.dir" value="etc"/>
	<property name="bin.dir" value="bin"/>
	<property name="lib.dir" value="lib"/>
	<property name="docs.dir" value="docs"/>
	<property name="build.dir" value="build"/>
	<property name="build.etc" value="${build.dir}/etc"/>
	<property name="build.src" value="${build.dir}/src"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.javadocs" value="${build.dir}/javadocs"/>
 	<property name="build.deps" value="${build.dir}/deps"/>
	<property name="dist.client" value="${name}-client-${version}"/>
	<property name="dist.server" value="${name}-server-${version}"/>
	<property name="dist.test" value="${name}-test-${version}"/>
	<property name="manifest.client" value="client-MANIFEST.MF"/>
	<property name="manifest.server" value="server-MANIFEST.MF"/>
	<property name="manifest.test" value="test-MANIFEST.MF"/>
	<property name="scheduler.jar"
		  value="scheduler-${scheduler.version}.jar"/>
	<property name="client.jar" value="${name}-client-${version}.jar"/>
	<property name="server.jar" value="${name}-server-${version}.jar"/>
	<property name="test.jar" value="${name}-test-${version}.jar"/>

	<!-- Compiler configuration -->
	<property name="build.compiler.pedantic" value="true"/>
	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="${scheduler.jar}"/>
		</fileset>
	</path>

	<!-- junit related -->
	<property name="testsrc.dir" location="test"/>
	<property name="testbuild.dir" location="${build.dir}/test"/>
	<property name="testdata.dir" location="${testbuild.dir}/data"/>
	<property name="testreports.dir" location="${testbuild.dir}/reports"/>
	<path id="junit.classpath">
		<path refid="classpath"/>
		<pathelement location="${build.dir}/classes"/>
		<pathelement location="${build.dir}/test"/>
	</path>

	<!-- Check for dependancies -->
	<target name="check">
		<mkdir dir="${build.deps}"/>
		<antcall target="check-subproject">
			<param name="file.dep" value="${scheduler.jar}"/>
			<param name="repo.name" value="scheduler"/>
			<param name="repo.version"
			       value="${scheduler.version}"/>
		</antcall>
	</target>

	<!-- Check for one subproject dependancy -->
	<target name="check-subproject">
		<available property="file.exists"
			   file="${lib.dir}/${file.dep}"/>
		<antcall target="build-subproject"/>
	</target>

	<!-- Build a subproject -->
	<target name="build-subproject" unless="file.exists">
		<antcall target="hg-check"/>
		<ant dir="${build.deps}/${repo.name}"
		     target="jar" inheritAll="false"/>
		<copy todir="${lib.dir}">
			<fileset dir="${build.deps}/${repo.name}/build/lib/"/>
		</copy>
	</target>

	<!-- Clone a mercurial subproject -->
	<target name="hg-check" unless="file.exists">
		<available property="dir.exists"
		           file="${build.deps}/${repo.name}"/>
		<antcall target="hg-clone"/>
	</target>

	<!-- Clone a mercurial subproject -->
	<target name="hg-clone" unless="dir.exists">
		<exec executable="hg" dir="${build.deps}" failonerror="true">
			<arg value="clone"/>
			<arg value="-r${repo.version}"/>
			<arg value="${hgbase.url}${repo.name}"/>
		</exec>
	</target>

	<!-- Prepare the build directory -->
	<target name="prepare">

		<copy todir="${build.src}" filtering="true">
			<fileset dir="${src.dir}"/>
			<filterset begintoken="@@" endtoken="@@">
				<filter token="VERSION" value="${version}"/>
			</filterset>
		</copy>

		<copy todir="${build.etc}">
			<fileset dir="${etc.dir}" />
			<filterset begintoken="@@" endtoken="@@">
				<filter token="VERSION" value="${version}"/>
				<filter token="SCHEDULER.VERSION"
				        value="${scheduler.version}"/>
			</filterset>
		</copy>

		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
	</target>

	<!-- Compile the source code -->
	<target name="compile"
	        depends="check,prepare"
	        description="Compile the source code">
		<javac srcdir="${build.src}"
		       destdir="${build.classes}"
		       debug="${debug}"
		       deprecation="on"
		       includeantruntime="false"
		       source="1.6"
		       target="1.6">
			<classpath refid="classpath"/>
			<compilerarg value="-Xlint:unchecked"/>
		</javac>
	</target>

	<!-- Create the server jar -->
	<target name="server-jar"
		depends="compile"
		description="Create the server jar">
		<jar jarfile="${build.lib}/${server.jar}">
			<fileset dir="${build.classes}">
				<include name="us/mn/state/dot/sonar/*.class"/>
				<include name="us/mn/state/dot/sonar/server/*.class"/>
			</fileset>
		</jar>
	</target>

	<!-- Create the server distribution -->
	<target name="server"
		depends="server-jar"
		description="Create the server distribution">
		<copy todir="${dist.server}">
			<fileset dir="${build.lib}">
				<include name="${server.jar}"/>
			</fileset>
		</copy>
	</target>

	<!-- Create the client jar -->
	<target name="client-jar"
	        depends="compile"
	        description="Create the client jar">
		<jar jarfile="${build.lib}/${client.jar}">
			<fileset dir="${build.classes}"
				 includes="us/mn/state/dot/sonar/*.class"/>
			<fileset dir="${build.classes}"
				 includes="us/mn/state/dot/sonar/client/*.class"/>
		</jar>
	</target>

	<!-- Create the client distribution -->
	<target name="client"
		depends="client-jar"
		description="Create the client distribution">
		<copy todir="${dist.client}">
			<fileset dir="${build.lib}">
				<include name="${client.jar}"/>
			</fileset>
		</copy>
	</target>

	<!-- Create the test jar -->
	<target name="test-jar"
	        depends="compile-junit"
	        description="Create the test jar">
		<jar jarfile="${build.lib}/${test.jar}"
		     manifest="${build.etc}/${manifest.test}">
			<fileset dir="${testbuild.dir}"/>
		</jar>
	</target>

	<!-- Create the test distribution -->
	<target name="test"
		depends="server-jar, client-jar, test-jar"
		description="Create the test distribution">
		<copy todir="${dist.test}">
			<fileset dir="${etc.dir}">
				<include name="sonar-test.keystore"/>
			</fileset>
			<fileset dir="${build.etc}">
				<include name="test_clients.py"/>
			</fileset>
			<fileset dir="${lib.dir}">
				<include name="${scheduler.jar}"/>
			</fileset>
			<fileset dir="${build.lib}">
				<include name="${client.jar}"/>
				<include name="${server.jar}"/>
				<include name="${test.jar}"/>
			</fileset>
		</copy>
	</target>

	<!-- Create the jars -->
	<target name="jar"
	        depends="server-jar, client-jar"
	        description="Create the jars">
	</target>

	<!-- Create the full distribution -->
	<target name="dist"
	        depends="server, client"
	        description="Create the full distribution">
	</target>

	<!-- Create the API documentation -->
	<target name="docs"
	        depends="prepare"
	        description="Create the API documentation">
		<mkdir dir="${build.javadocs}" />
		<javadoc packagenames="${packages}"
			 sourcepath="${src.dir}"
		         destdir="${build.javadocs}"
		         author="true"
		         version="true"
			 windowtitle="${name} version ${version} API"
			 doctitle="${name} version ${version}"
		         bottom="Copyright &#169; Minnesota Department of
		                 Transportation. All Rights Reserved.">
			<classpath refid="classpath"/>
		</javadoc>
	</target>

	<!-- Clean up generated stuff -->
	<target name="clean"
	        description="Clean up the created directories">
		<delete dir="${build.dir}"/>
		<delete dir="${dist.client}"/>
		<delete dir="${dist.server}"/>
		<delete dir="${dist.test}"/>
	</target>

       <!-- init junit dirs-->
       <target name="init-junit"
	       depends="prepare">
	       <delete dir="${testdata.dir}"/>
	       <delete dir="${testreports.dir}"/>
	       <mkdir dir="${testbuild.dir}" />
	       <mkdir dir="${testdata.dir}" />
	       <mkdir dir="${testreports.dir}" />
       </target>

       <!-- compile junit test cases -->
       <target name="compile-junit"
	       depends="compile, init-junit">
		<javac srcdir="${testsrc.dir}"
		       destdir="${testbuild.dir}"
		       debug="true"
		       deprecation="on"
		       includeantruntime="true"
		       source="1.6"
		       target="1.6">
			<classpath refid="junit.classpath"/>
		</javac>
       </target>

       <!-- run junit test cases -->
       <target name="test-junit" depends="compile-junit"
	       description="Run junit test cases">
	       <junit printsummary="yes" 
		       fork="yes" 
		       haltonfailure="yes" 
		       errorProperty="test.failed" 
		       failureProperty="test.failed">
		       <classpath refid="junit.classpath"/>
		       <formatter type="plain" usefile="false"/>
		       <formatter type="xml" usefile="true"/>
		       <jvmarg value="-Ddebug=true"/>
		       <batchtest todir="${testreports.dir}">
			       <fileset dir="${testbuild.dir}" includes="**/*Test.class"/>
		       </batchtest>
	       </junit>
	       <fail message="Junit tests failed. Check log and/or reports."
		       if="test.failed"/>
       </target>

</project>
